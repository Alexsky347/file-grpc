package com.drive.backend.grpc.service;

import com.drive.backend.grpc.dto.FileInfoDto;
import io.quarkus.example.FileService;
import io.quarkus.example.ListUserFilesRequest;
import io.quarkus.example.ListUserFilesResponse;
import io.quarkus.grpc.GrpcService;
import io.smallrye.common.annotation.RunOnVirtualThread;
import io.smallrye.mutiny.Uni;
import jakarta.inject.Inject;

@GrpcService
public class FileInfoService implements FileService {

    private final MinioService minioService;

    @Inject
    public FileInfoService(MinioService minioService) {
        this.minioService = minioService;
    }

    /**
     * This service implements the FileService interface generated by the Mutiny Grpc generator.
     * It provides an implementation for the uploadFile method.
     */
    @RunOnVirtualThread
    @Override
    public io.smallrye.mutiny.Uni<io.quarkus.example.FileUploadResponse> uploadFile(io.quarkus.example.FileUploadRequest request) {
        return minioService.uploadFile(request.getContent().toByteArray(), request.getFilename(), request.getUser())
                .onItem().transform(objectName -> io.quarkus.example.FileUploadResponse.newBuilder()
                        .setSuccess(true)
                        .setMessage("File uploaded successfully")
                        .build())
                .onFailure().recoverWithItem(th -> io.quarkus.example.FileUploadResponse.newBuilder()
                        .setSuccess(false)
                        .setMessage("Upload failed: " + th.getMessage())
                        .build());
    }

    /**
     * Implementation of the deleteFile method from the FileService interface.
     */
    @RunOnVirtualThread
    @Override
    public io.smallrye.mutiny.Uni<io.quarkus.example.FileOperationResponse> deleteFile(io.quarkus.example.FileDeleteRequest request) {
        String uuid = request.getUuid();
        String user = request.getUser();

        return minioService.listUserFiles(user)
                .onItem().transformToUni(files -> {
                    String objectName = null;
                    for (FileInfoDto file : files)
                        if (uuid.equals(file.uuid())) {
                            objectName = file.objectName();
                            break;
                        }
                    if (objectName == null)
                        return Uni.createFrom().item(io.quarkus.example.FileOperationResponse.newBuilder()
                                .setSuccess(false)
                                .setMessage("File not found with uuid: " + uuid)
                                .build());
                    return minioService.deleteFile(objectName)
                            .onItem().transform(success -> io.quarkus.example.FileOperationResponse.newBuilder()
                                    .setSuccess(success)
                                    .setMessage(success ? "File deleted successfully" : "Failed to delete file")
                                    .build());
                })
                .onFailure().recoverWithItem(th -> io.quarkus.example.FileOperationResponse.newBuilder()
                        .setSuccess(false)
                        .setMessage("Delete failed: " + th.getMessage())
                        .build());
    }

    /**
     * Implementation of the renameFile method from the FileService interface.
     */
    @RunOnVirtualThread
    @Override
    public io.smallrye.mutiny.Uni<io.quarkus.example.FileOperationResponse> renameFile(io.quarkus.example.FileRenameRequest request) {
        String uuid = request.getUuid();
        String newFilename = request.getNewFilename();
        String user = request.getUser();

        return minioService.listUserFiles(user)
                .onItem().transformToUni(files -> {
                    String oldObjectName = null;
                    for (FileInfoDto file : files)
                        if (uuid.equals(file.uuid())) {
                            oldObjectName = file.objectName();
                            break;
                        }
                    if (oldObjectName == null)
                        return Uni.createFrom().item(io.quarkus.example.FileOperationResponse.newBuilder()
                                .setSuccess(false)
                                .setMessage("File not found with uuid: " + uuid)
                                .build());
                    return minioService.renameFile(oldObjectName, newFilename, user)
                            .onItem().transform(success -> io.quarkus.example.FileOperationResponse.newBuilder()
                                    .setSuccess(success)
                                    .setMessage(success ? "File renamed successfully" : "Failed to rename file")
                                    .build());
                })
                .onFailure().recoverWithItem(th -> io.quarkus.example.FileOperationResponse.newBuilder()
                        .setSuccess(false)
                        .setMessage("Rename failed: " + th.getMessage())
                        .build());
    }

    /**
     * Implementation of the listUserFiles method from the FileService interface.
     * Lists all files for a specific user from MinIO storage.
     */
    @RunOnVirtualThread
    @Override
    public Uni<ListUserFilesResponse> listUserFiles(ListUserFilesRequest request) {
        String username = request.getUsername();

        return minioService.listUserFiles(username)
                .onItem().transform(files -> {
                    ListUserFilesResponse.Builder responseBuilder = ListUserFilesResponse.newBuilder()
                            .setSuccess(true)
                            .setMessage("Files retrieved successfully for user: " + username);

                    // Convert from DTO FileInfo to gRPC FileInfo
                    for (FileInfoDto file : files) {
                        io.quarkus.example.FileInfo fileInfo = io.quarkus.example.FileInfo.newBuilder()
                                .setObjectName(file.objectName())
                                .setFilename(file.filename())
                                .setSize(file.size())
                                .setLastModified(file.lastModified().getTime())
                                .setFileUrl(file.fileUrl())
                                .setUuid(file.uuid())
                                .build();

                        responseBuilder.addFiles(fileInfo);
                    }

                    return responseBuilder.build();
                })
                .onFailure().recoverWithItem(() -> ListUserFilesResponse.newBuilder()
                        .setSuccess(false)
                        .setMessage("Failed to retrieve files for user: " + username)
                        .build());
    }
}
