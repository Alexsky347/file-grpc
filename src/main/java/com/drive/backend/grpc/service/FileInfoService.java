package com.drive.backend.grpc.service;

import io.quarkus.example.*;
import io.quarkus.grpc.GrpcService;
import io.smallrye.common.annotation.RunOnVirtualThread;
import io.smallrye.mutiny.Uni;
import jakarta.inject.Inject;

@GrpcService
public class FileInfoService implements FileService {

    private final MinioService minioService;

    @Inject
    public FileInfoService(MinioService minioService) {
        this.minioService = minioService;
    }

    /**
     * This service implements the FileService interface generated by the Mutiny Grpc generator.
     * It provides an implementation for the uploadFile method.
     */
    @RunOnVirtualThread
    @Override
    public io.smallrye.mutiny.Uni<io.quarkus.example.FileUploadResponse> uploadFile(io.quarkus.example.FileUploadRequest request) {
        // Implement the file upload logic here
        // For now, just return a dummy response
        io.quarkus.example.FileUploadResponse response = io.quarkus.example.FileUploadResponse.newBuilder()
                .setSuccess(true)
                .setMessage("File uploaded successfully")
                .build();
        return io.smallrye.mutiny.Uni.createFrom().item(response);
    }

    /**
     * Implementation of the deleteFile method from the FileService interface.
     */
    @RunOnVirtualThread
    @Override
    public io.smallrye.mutiny.Uni<io.quarkus.example.FileOperationResponse> deleteFile(io.quarkus.example.FileDeleteRequest request) {
        // Implement the file deletion logic here
        // For now, just return a dummy response
        io.quarkus.example.FileOperationResponse response = io.quarkus.example.FileOperationResponse.newBuilder()
                .setSuccess(true)
                .setMessage("File deleted successfully: " + request.getFilename())
                .build();
        return io.smallrye.mutiny.Uni.createFrom().item(response);
    }

    /**
     * Implementation of the renameFile method from the FileService interface.
     */
    @RunOnVirtualThread
    @Override
    public io.smallrye.mutiny.Uni<io.quarkus.example.FileOperationResponse> renameFile(io.quarkus.example.FileRenameRequest request) {
        // Implement the file renaming logic here
        // For now, just return a dummy response
        io.quarkus.example.FileOperationResponse response = io.quarkus.example.FileOperationResponse.newBuilder()
                .setSuccess(true)
                .setMessage("File renamed successfully from: " + request.getOldFilename() + " to: " + request.getNewFilename())
                .build();
        return io.smallrye.mutiny.Uni.createFrom().item(response);
    }

    /**
     * Implementation of the listUserFiles method from the FileService interface.
     * Lists all files for a specific user from MinIO storage.
     */
    @RunOnVirtualThread
    @Override
    public Uni<ListUserFilesResponse> listUserFiles(ListUserFilesRequest request) {
        String username = request.getUsername();

        return minioService.listUserFiles(username)
                .onItem().transform(files -> {
                    ListUserFilesResponse.Builder responseBuilder = ListUserFilesResponse.newBuilder()
                            .setSuccess(true)
                            .setMessage("Files retrieved successfully for user: " + username);

                    // Convert from DTO FileInfo to gRPC FileInfo
                    for (com.drive.backend.grpc.dto.FileInfo file : files) {
                        io.quarkus.example.FileInfo fileInfo = io.quarkus.example.FileInfo.newBuilder()
                                .setObjectName(file.getObjectName())
                                .setFilename(file.getFilename())
                                .setSize(file.getSize())
                                .setLastModified(file.getLastModified().getTime())
                                .setFileUrl(file.getFileUrl())
                                .build();

                        responseBuilder.addFiles(fileInfo);
                    }

                    return responseBuilder.build();
                })
                .onFailure().recoverWithItem(() -> ListUserFilesResponse.newBuilder()
                        .setSuccess(false)
                        .setMessage("Failed to retrieve files for user: " + username)
                        .build());
    }
}
